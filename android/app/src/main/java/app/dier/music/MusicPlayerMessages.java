// Autogenerated from Pigeon (v0.1.16), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package app.dier.music;

import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.StandardMessageCodec;
import java.util.ArrayList;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings("unused")
public class MusicPlayerMessages {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class SongsMessage {
    private ArrayList songs;
    public ArrayList getSongs() { return songs; }
    public void setSongs(ArrayList setterArg) { this.songs = setterArg; }

    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("songs", songs);
      return toMapResult;
    }
    static SongsMessage fromMap(HashMap map) {
      SongsMessage fromMapResult = new SongsMessage();
      Object songs = map.get("songs");
      fromMapResult.songs = (ArrayList)songs;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class PlayModeMessage {
    private Long playMode;
    public Long getPlayMode() { return playMode; }
    public void setPlayMode(Long setterArg) { this.playMode = setterArg; }

    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("playMode", playMode);
      return toMapResult;
    }
    static PlayModeMessage fromMap(HashMap map) {
      PlayModeMessage fromMapResult = new PlayModeMessage();
      Object playMode = map.get("playMode");
      fromMapResult.playMode = (playMode == null) ? null : ((playMode instanceof Integer) ? (Integer)playMode : (Long)playMode);
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class SongMessage {
    private String plt;
    public String getPlt() { return plt; }
    public void setPlt(String setterArg) { this.plt = setterArg; }

    private String id;
    public String getId() { return id; }
    public void setId(String setterArg) { this.id = setterArg; }

    private String name;
    public String getName() { return name; }
    public void setName(String setterArg) { this.name = setterArg; }

    private String subtitle;
    public String getSubtitle() { return subtitle; }
    public void setSubtitle(String setterArg) { this.subtitle = setterArg; }

    private String cover;
    public String getCover() { return cover; }
    public void setCover(String setterArg) { this.cover = setterArg; }

    private String streamUrl;
    public String getStreamUrl() { return streamUrl; }
    public void setStreamUrl(String setterArg) { this.streamUrl = setterArg; }

    private String description;
    public String getDescription() { return description; }
    public void setDescription(String setterArg) { this.description = setterArg; }

    private String albumId;
    public String getAlbumId() { return albumId; }
    public void setAlbumId(String setterArg) { this.albumId = setterArg; }

    private String albumName;
    public String getAlbumName() { return albumName; }
    public void setAlbumName(String setterArg) { this.albumName = setterArg; }

    private String albumCover;
    public String getAlbumCover() { return albumCover; }
    public void setAlbumCover(String setterArg) { this.albumCover = setterArg; }

    private String singerId;
    public String getSingerId() { return singerId; }
    public void setSingerId(String setterArg) { this.singerId = setterArg; }

    private String singerName;
    public String getSingerName() { return singerName; }
    public void setSingerName(String setterArg) { this.singerName = setterArg; }

    private String singerAvatar;
    public String getSingerAvatar() { return singerAvatar; }
    public void setSingerAvatar(String setterArg) { this.singerAvatar = setterArg; }

    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("plt", plt);
      toMapResult.put("id", id);
      toMapResult.put("name", name);
      toMapResult.put("subtitle", subtitle);
      toMapResult.put("cover", cover);
      toMapResult.put("streamUrl", streamUrl);
      toMapResult.put("description", description);
      toMapResult.put("albumId", albumId);
      toMapResult.put("albumName", albumName);
      toMapResult.put("albumCover", albumCover);
      toMapResult.put("singerId", singerId);
      toMapResult.put("singerName", singerName);
      toMapResult.put("singerAvatar", singerAvatar);
      return toMapResult;
    }
    static SongMessage fromMap(HashMap map) {
      SongMessage fromMapResult = new SongMessage();
      Object plt = map.get("plt");
      fromMapResult.plt = (String)plt;
      Object id = map.get("id");
      fromMapResult.id = (String)id;
      Object name = map.get("name");
      fromMapResult.name = (String)name;
      Object subtitle = map.get("subtitle");
      fromMapResult.subtitle = (String)subtitle;
      Object cover = map.get("cover");
      fromMapResult.cover = (String)cover;
      Object streamUrl = map.get("streamUrl");
      fromMapResult.streamUrl = (String)streamUrl;
      Object description = map.get("description");
      fromMapResult.description = (String)description;
      Object albumId = map.get("albumId");
      fromMapResult.albumId = (String)albumId;
      Object albumName = map.get("albumName");
      fromMapResult.albumName = (String)albumName;
      Object albumCover = map.get("albumCover");
      fromMapResult.albumCover = (String)albumCover;
      Object singerId = map.get("singerId");
      fromMapResult.singerId = (String)singerId;
      Object singerName = map.get("singerName");
      fromMapResult.singerName = (String)singerName;
      Object singerAvatar = map.get("singerAvatar");
      fromMapResult.singerAvatar = (String)singerAvatar;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class PositionMessage {
    private Long position;
    public Long getPosition() { return position; }
    public void setPosition(Long setterArg) { this.position = setterArg; }

    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("position", position);
      return toMapResult;
    }
    static PositionMessage fromMap(HashMap map) {
      PositionMessage fromMapResult = new PositionMessage();
      Object position = map.get("position");
      fromMapResult.position = (position == null) ? null : ((position instanceof Integer) ? (Integer)position : (Long)position);
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class StreamUrlMessage {
    private String streamUrl;
    public String getStreamUrl() { return streamUrl; }
    public void setStreamUrl(String setterArg) { this.streamUrl = setterArg; }

    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("streamUrl", streamUrl);
      return toMapResult;
    }
    static StreamUrlMessage fromMap(HashMap map) {
      StreamUrlMessage fromMapResult = new StreamUrlMessage();
      Object streamUrl = map.get("streamUrl");
      fromMapResult.streamUrl = (String)streamUrl;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class StateMessage {
    private Long state;
    public Long getState() { return state; }
    public void setState(Long setterArg) { this.state = setterArg; }

    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("state", state);
      return toMapResult;
    }
    static StateMessage fromMap(HashMap map) {
      StateMessage fromMapResult = new StateMessage();
      Object state = map.get("state");
      fromMapResult.state = (state == null) ? null : ((state instanceof Integer) ? (Integer)state : (Long)state);
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class DurationMessage {
    private Long duration;
    public Long getDuration() { return duration; }
    public void setDuration(Long setterArg) { this.duration = setterArg; }

    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("duration", duration);
      return toMapResult;
    }
    static DurationMessage fromMap(HashMap map) {
      DurationMessage fromMapResult = new DurationMessage();
      Object duration = map.get("duration");
      fromMapResult.duration = (duration == null) ? null : ((duration instanceof Integer) ? (Integer)duration : (Long)duration);
      return fromMapResult;
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface MusicPlayerControllerApi {
    void addToPlaylist(SongsMessage arg);
    void removeFromPlaylist(SongsMessage arg);
    void replacePlaylist(SongsMessage arg);
    void setPlayMode(PlayModeMessage arg);
    void play(SongMessage arg);
    void pause();
    void resume();
    void stop();
    void seek(PositionMessage arg);

    /** Sets up an instance of `MusicPlayerControllerApi` to handle messages through the `binaryMessenger` */
    static void setup(BinaryMessenger binaryMessenger, MusicPlayerControllerApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.MusicPlayerControllerApi.addToPlaylist", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              SongsMessage input = SongsMessage.fromMap((HashMap)message);
              api.addToPlaylist(input);
              wrapped.put("result", null);
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.MusicPlayerControllerApi.removeFromPlaylist", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              SongsMessage input = SongsMessage.fromMap((HashMap)message);
              api.removeFromPlaylist(input);
              wrapped.put("result", null);
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.MusicPlayerControllerApi.replacePlaylist", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              SongsMessage input = SongsMessage.fromMap((HashMap)message);
              api.replacePlaylist(input);
              wrapped.put("result", null);
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.MusicPlayerControllerApi.setPlayMode", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              PlayModeMessage input = PlayModeMessage.fromMap((HashMap)message);
              api.setPlayMode(input);
              wrapped.put("result", null);
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.MusicPlayerControllerApi.play", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              SongMessage input = SongMessage.fromMap((HashMap)message);
              api.play(input);
              wrapped.put("result", null);
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.MusicPlayerControllerApi.pause", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              api.pause();
              wrapped.put("result", null);
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.MusicPlayerControllerApi.resume", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              api.resume();
              wrapped.put("result", null);
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.MusicPlayerControllerApi.stop", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              api.stop();
              wrapped.put("result", null);
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.MusicPlayerControllerApi.seek", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              PositionMessage input = PositionMessage.fromMap((HashMap)message);
              api.seek(input);
              wrapped.put("result", null);
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java.*/
  public static class MusicPlayerCallbackApi {
    private final BinaryMessenger binaryMessenger;
    public MusicPlayerCallbackApi(BinaryMessenger argBinaryMessenger){
      this.binaryMessenger = argBinaryMessenger;
    }
    public interface Reply<T> {
      void reply(T reply);
    }
    public void streamUrl(SongMessage argInput, Reply<StreamUrlMessage> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.MusicPlayerCallbackApi.streamUrl", new StandardMessageCodec());
      HashMap inputMap = argInput.toMap();
      channel.send(inputMap, channelReply -> {
        HashMap outputMap = (HashMap)channelReply;
        @SuppressWarnings("ConstantConditions")
        StreamUrlMessage output = StreamUrlMessage.fromMap(outputMap);
        callback.reply(output);
      });
    }
    public void onPlayerStateChange(StateMessage argInput, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.MusicPlayerCallbackApi.onPlayerStateChange", new StandardMessageCodec());
      HashMap inputMap = argInput.toMap();
      channel.send(inputMap, channelReply -> {
        callback.reply(null);
      });
    }
    public void onSongChanged(SongMessage argInput, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.MusicPlayerCallbackApi.onSongChanged", new StandardMessageCodec());
      HashMap inputMap = argInput.toMap();
      channel.send(inputMap, channelReply -> {
        callback.reply(null);
      });
    }
    public void onPositionChanged(PositionMessage argInput, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.MusicPlayerCallbackApi.onPositionChanged", new StandardMessageCodec());
      HashMap inputMap = argInput.toMap();
      channel.send(inputMap, channelReply -> {
        callback.reply(null);
      });
    }
    public void onDurationChanged(DurationMessage argInput, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.MusicPlayerCallbackApi.onDurationChanged", new StandardMessageCodec());
      HashMap inputMap = argInput.toMap();
      channel.send(inputMap, channelReply -> {
        callback.reply(null);
      });
    }
  }
  private static HashMap wrapError(Exception exception) {
    HashMap<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", null);
    return errorMap;
  }
}
