// Autogenerated from Pigeon (v0.1.16), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import
// @dart = 2.8
import 'dart:async';
import 'package:flutter/services.dart';
import 'dart:typed_data' show Uint8List, Int32List, Int64List, Float64List;

class SongsMessage {
  List songs;
  // ignore: unused_element
  Map<dynamic, dynamic> _toMap() {
    final Map<dynamic, dynamic> pigeonMap = <dynamic, dynamic>{};
    pigeonMap['songs'] = songs;
    return pigeonMap;
  }
  // ignore: unused_element
  static SongsMessage _fromMap(Map<dynamic, dynamic> pigeonMap) {
    final SongsMessage result = SongsMessage();
    result.songs = pigeonMap['songs'];
    return result;
  }
}

class PlayModeMessage {
  int playMode;
  // ignore: unused_element
  Map<dynamic, dynamic> _toMap() {
    final Map<dynamic, dynamic> pigeonMap = <dynamic, dynamic>{};
    pigeonMap['playMode'] = playMode;
    return pigeonMap;
  }
  // ignore: unused_element
  static PlayModeMessage _fromMap(Map<dynamic, dynamic> pigeonMap) {
    final PlayModeMessage result = PlayModeMessage();
    result.playMode = pigeonMap['playMode'];
    return result;
  }
}

class SongMessage {
  String plt;
  String id;
  String name;
  String subtitle;
  String cover;
  String streamUrl;
  String description;
  String albumId;
  String albumName;
  String albumCover;
  String singerId;
  String singerName;
  String singerAvatar;
  // ignore: unused_element
  Map<dynamic, dynamic> _toMap() {
    final Map<dynamic, dynamic> pigeonMap = <dynamic, dynamic>{};
    pigeonMap['plt'] = plt;
    pigeonMap['id'] = id;
    pigeonMap['name'] = name;
    pigeonMap['subtitle'] = subtitle;
    pigeonMap['cover'] = cover;
    pigeonMap['streamUrl'] = streamUrl;
    pigeonMap['description'] = description;
    pigeonMap['albumId'] = albumId;
    pigeonMap['albumName'] = albumName;
    pigeonMap['albumCover'] = albumCover;
    pigeonMap['singerId'] = singerId;
    pigeonMap['singerName'] = singerName;
    pigeonMap['singerAvatar'] = singerAvatar;
    return pigeonMap;
  }
  // ignore: unused_element
  static SongMessage _fromMap(Map<dynamic, dynamic> pigeonMap) {
    final SongMessage result = SongMessage();
    result.plt = pigeonMap['plt'];
    result.id = pigeonMap['id'];
    result.name = pigeonMap['name'];
    result.subtitle = pigeonMap['subtitle'];
    result.cover = pigeonMap['cover'];
    result.streamUrl = pigeonMap['streamUrl'];
    result.description = pigeonMap['description'];
    result.albumId = pigeonMap['albumId'];
    result.albumName = pigeonMap['albumName'];
    result.albumCover = pigeonMap['albumCover'];
    result.singerId = pigeonMap['singerId'];
    result.singerName = pigeonMap['singerName'];
    result.singerAvatar = pigeonMap['singerAvatar'];
    return result;
  }
}

class PositionMessage {
  int position;
  // ignore: unused_element
  Map<dynamic, dynamic> _toMap() {
    final Map<dynamic, dynamic> pigeonMap = <dynamic, dynamic>{};
    pigeonMap['position'] = position;
    return pigeonMap;
  }
  // ignore: unused_element
  static PositionMessage _fromMap(Map<dynamic, dynamic> pigeonMap) {
    final PositionMessage result = PositionMessage();
    result.position = pigeonMap['position'];
    return result;
  }
}

class StreamUrlMessage {
  String streamUrl;
  // ignore: unused_element
  Map<dynamic, dynamic> _toMap() {
    final Map<dynamic, dynamic> pigeonMap = <dynamic, dynamic>{};
    pigeonMap['streamUrl'] = streamUrl;
    return pigeonMap;
  }
  // ignore: unused_element
  static StreamUrlMessage _fromMap(Map<dynamic, dynamic> pigeonMap) {
    final StreamUrlMessage result = StreamUrlMessage();
    result.streamUrl = pigeonMap['streamUrl'];
    return result;
  }
}

class StateMessage {
  int state;
  // ignore: unused_element
  Map<dynamic, dynamic> _toMap() {
    final Map<dynamic, dynamic> pigeonMap = <dynamic, dynamic>{};
    pigeonMap['state'] = state;
    return pigeonMap;
  }
  // ignore: unused_element
  static StateMessage _fromMap(Map<dynamic, dynamic> pigeonMap) {
    final StateMessage result = StateMessage();
    result.state = pigeonMap['state'];
    return result;
  }
}

class DurationMessage {
  int duration;
  // ignore: unused_element
  Map<dynamic, dynamic> _toMap() {
    final Map<dynamic, dynamic> pigeonMap = <dynamic, dynamic>{};
    pigeonMap['duration'] = duration;
    return pigeonMap;
  }
  // ignore: unused_element
  static DurationMessage _fromMap(Map<dynamic, dynamic> pigeonMap) {
    final DurationMessage result = DurationMessage();
    result.duration = pigeonMap['duration'];
    return result;
  }
}

class MusicPlayerControllerApi {
  Future<void> addToPlaylist(SongsMessage arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.MusicPlayerControllerApi.addToPlaylist', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      // noop
    }
    
  }
  Future<void> removeFromPlaylist(SongsMessage arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.MusicPlayerControllerApi.removeFromPlaylist', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      // noop
    }
    
  }
  Future<void> replacePlaylist(SongsMessage arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.MusicPlayerControllerApi.replacePlaylist', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      // noop
    }
    
  }
  Future<void> setPlayMode(PlayModeMessage arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.MusicPlayerControllerApi.setPlayMode', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      // noop
    }
    
  }
  Future<void> play(SongMessage arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.MusicPlayerControllerApi.play', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      // noop
    }
    
  }
  Future<void> pause() async {
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.MusicPlayerControllerApi.pause', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(null);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      // noop
    }
    
  }
  Future<void> resume() async {
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.MusicPlayerControllerApi.resume', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(null);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      // noop
    }
    
  }
  Future<void> stop() async {
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.MusicPlayerControllerApi.stop', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(null);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      // noop
    }
    
  }
  Future<void> seek(PositionMessage arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.MusicPlayerControllerApi.seek', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      // noop
    }
    
  }
}

abstract class MusicPlayerCallbackApi {
  StreamUrlMessage streamUrl(SongMessage arg);
  void onPlayerStateChange(StateMessage arg);
  void onSongChanged(SongMessage arg);
  void onPositionChanged(PositionMessage arg);
  void onDurationChanged(DurationMessage arg);
  static void setup(MusicPlayerCallbackApi api) {
    {
      const BasicMessageChannel<dynamic> channel =
          BasicMessageChannel<dynamic>('dev.flutter.pigeon.MusicPlayerCallbackApi.streamUrl', StandardMessageCodec());
      if (api == null) {
        channel.setMessageHandler(null);
      } else {

        channel.setMessageHandler((dynamic message) async {
          final Map<dynamic, dynamic> mapMessage = message as Map<dynamic, dynamic>;
          final SongMessage input = SongMessage._fromMap(mapMessage);
          final StreamUrlMessage output = api.streamUrl(input);
          return output._toMap();
        });
      }
    }
    {
      const BasicMessageChannel<dynamic> channel =
          BasicMessageChannel<dynamic>('dev.flutter.pigeon.MusicPlayerCallbackApi.onPlayerStateChange', StandardMessageCodec());
      if (api == null) {
        channel.setMessageHandler(null);
      } else {

        channel.setMessageHandler((dynamic message) async {
          final Map<dynamic, dynamic> mapMessage = message as Map<dynamic, dynamic>;
          final StateMessage input = StateMessage._fromMap(mapMessage);
          api.onPlayerStateChange(input);
        });
      }
    }
    {
      const BasicMessageChannel<dynamic> channel =
          BasicMessageChannel<dynamic>('dev.flutter.pigeon.MusicPlayerCallbackApi.onSongChanged', StandardMessageCodec());
      if (api == null) {
        channel.setMessageHandler(null);
      } else {

        channel.setMessageHandler((dynamic message) async {
          final Map<dynamic, dynamic> mapMessage = message as Map<dynamic, dynamic>;
          final SongMessage input = SongMessage._fromMap(mapMessage);
          api.onSongChanged(input);
        });
      }
    }
    {
      const BasicMessageChannel<dynamic> channel =
          BasicMessageChannel<dynamic>('dev.flutter.pigeon.MusicPlayerCallbackApi.onPositionChanged', StandardMessageCodec());
      if (api == null) {
        channel.setMessageHandler(null);
      } else {

        channel.setMessageHandler((dynamic message) async {
          final Map<dynamic, dynamic> mapMessage = message as Map<dynamic, dynamic>;
          final PositionMessage input = PositionMessage._fromMap(mapMessage);
          api.onPositionChanged(input);
        });
      }
    }
    {
      const BasicMessageChannel<dynamic> channel =
          BasicMessageChannel<dynamic>('dev.flutter.pigeon.MusicPlayerCallbackApi.onDurationChanged', StandardMessageCodec());
      if (api == null) {
        channel.setMessageHandler(null);
      } else {

        channel.setMessageHandler((dynamic message) async {
          final Map<dynamic, dynamic> mapMessage = message as Map<dynamic, dynamic>;
          final DurationMessage input = DurationMessage._fromMap(mapMessage);
          api.onDurationChanged(input);
        });
      }
    }
  }
}

