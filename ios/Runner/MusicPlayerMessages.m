// Autogenerated from Pigeon (v0.1.16), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "MusicPlayerMessages.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary* wrapResult(NSDictionary *result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = [NSDictionary dictionaryWithObjectsAndKeys:
        (error.code ? error.code : [NSNull null]), @"code",
        (error.message ? error.message : [NSNull null]), @"message",
        (error.details ? error.details : [NSNull null]), @"details",
        nil];
  }
  return [NSDictionary dictionaryWithObjectsAndKeys:
      (result ? result : [NSNull null]), @"result",
      errorDict, @"error",
      nil];
}

@interface FLTSongsMessage ()
+(FLTSongsMessage*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface FLTPlayModeMessage ()
+(FLTPlayModeMessage*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface FLTSongMessage ()
+(FLTSongMessage*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface FLTPositionMessage ()
+(FLTPositionMessage*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface FLTStreamUrlMessage ()
+(FLTStreamUrlMessage*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface FLTStateMessage ()
+(FLTStateMessage*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface FLTDurationMessage ()
+(FLTDurationMessage*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end

@implementation FLTSongsMessage
+(FLTSongsMessage*)fromMap:(NSDictionary*)dict {
  FLTSongsMessage* result = [[FLTSongsMessage alloc] init];
  result.songs = dict[@"songs"];
  if ((NSNull *)result.songs == [NSNull null]) {
    result.songs = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.songs ? self.songs : [NSNull null]), @"songs", nil];
}
@end

@implementation FLTPlayModeMessage
+(FLTPlayModeMessage*)fromMap:(NSDictionary*)dict {
  FLTPlayModeMessage* result = [[FLTPlayModeMessage alloc] init];
  result.playMode = dict[@"playMode"];
  if ((NSNull *)result.playMode == [NSNull null]) {
    result.playMode = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.playMode ? self.playMode : [NSNull null]), @"playMode", nil];
}
@end

@implementation FLTSongMessage
+(FLTSongMessage*)fromMap:(NSDictionary*)dict {
  FLTSongMessage* result = [[FLTSongMessage alloc] init];
  result.plt = dict[@"plt"];
  if ((NSNull *)result.plt == [NSNull null]) {
    result.plt = nil;
  }
  result.id = dict[@"id"];
  if ((NSNull *)result.id == [NSNull null]) {
    result.id = nil;
  }
  result.name = dict[@"name"];
  if ((NSNull *)result.name == [NSNull null]) {
    result.name = nil;
  }
  result.subtitle = dict[@"subtitle"];
  if ((NSNull *)result.subtitle == [NSNull null]) {
    result.subtitle = nil;
  }
  result.cover = dict[@"cover"];
  if ((NSNull *)result.cover == [NSNull null]) {
    result.cover = nil;
  }
  result.streamUrl = dict[@"streamUrl"];
  if ((NSNull *)result.streamUrl == [NSNull null]) {
    result.streamUrl = nil;
  }
  result.description = dict[@"description"];
  if ((NSNull *)result.description == [NSNull null]) {
    result.description = nil;
  }
  result.albumId = dict[@"albumId"];
  if ((NSNull *)result.albumId == [NSNull null]) {
    result.albumId = nil;
  }
  result.albumName = dict[@"albumName"];
  if ((NSNull *)result.albumName == [NSNull null]) {
    result.albumName = nil;
  }
  result.albumCover = dict[@"albumCover"];
  if ((NSNull *)result.albumCover == [NSNull null]) {
    result.albumCover = nil;
  }
  result.singerId = dict[@"singerId"];
  if ((NSNull *)result.singerId == [NSNull null]) {
    result.singerId = nil;
  }
  result.singerName = dict[@"singerName"];
  if ((NSNull *)result.singerName == [NSNull null]) {
    result.singerName = nil;
  }
  result.singerAvatar = dict[@"singerAvatar"];
  if ((NSNull *)result.singerAvatar == [NSNull null]) {
    result.singerAvatar = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.plt ? self.plt : [NSNull null]), @"plt", (self.id ? self.id : [NSNull null]), @"id", (self.name ? self.name : [NSNull null]), @"name", (self.subtitle ? self.subtitle : [NSNull null]), @"subtitle", (self.cover ? self.cover : [NSNull null]), @"cover", (self.streamUrl ? self.streamUrl : [NSNull null]), @"streamUrl", (self.description ? self.description : [NSNull null]), @"description", (self.albumId ? self.albumId : [NSNull null]), @"albumId", (self.albumName ? self.albumName : [NSNull null]), @"albumName", (self.albumCover ? self.albumCover : [NSNull null]), @"albumCover", (self.singerId ? self.singerId : [NSNull null]), @"singerId", (self.singerName ? self.singerName : [NSNull null]), @"singerName", (self.singerAvatar ? self.singerAvatar : [NSNull null]), @"singerAvatar", nil];
}
@end

@implementation FLTPositionMessage
+(FLTPositionMessage*)fromMap:(NSDictionary*)dict {
  FLTPositionMessage* result = [[FLTPositionMessage alloc] init];
  result.position = dict[@"position"];
  if ((NSNull *)result.position == [NSNull null]) {
    result.position = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.position ? self.position : [NSNull null]), @"position", nil];
}
@end

@implementation FLTStreamUrlMessage
+(FLTStreamUrlMessage*)fromMap:(NSDictionary*)dict {
  FLTStreamUrlMessage* result = [[FLTStreamUrlMessage alloc] init];
  result.streamUrl = dict[@"streamUrl"];
  if ((NSNull *)result.streamUrl == [NSNull null]) {
    result.streamUrl = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.streamUrl ? self.streamUrl : [NSNull null]), @"streamUrl", nil];
}
@end

@implementation FLTStateMessage
+(FLTStateMessage*)fromMap:(NSDictionary*)dict {
  FLTStateMessage* result = [[FLTStateMessage alloc] init];
  result.state = dict[@"state"];
  if ((NSNull *)result.state == [NSNull null]) {
    result.state = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.state ? self.state : [NSNull null]), @"state", nil];
}
@end

@implementation FLTDurationMessage
+(FLTDurationMessage*)fromMap:(NSDictionary*)dict {
  FLTDurationMessage* result = [[FLTDurationMessage alloc] init];
  result.duration = dict[@"duration"];
  if ((NSNull *)result.duration == [NSNull null]) {
    result.duration = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.duration ? self.duration : [NSNull null]), @"duration", nil];
}
@end

void FLTMusicPlayerControllerApiSetup(id<FlutterBinaryMessenger> binaryMessenger, id<FLTMusicPlayerControllerApi> api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.MusicPlayerControllerApi.addToPlaylist"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTSongsMessage *input = [FLTSongsMessage fromMap:message];
        [api addToPlaylist:input error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.MusicPlayerControllerApi.removeFromPlaylist"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTSongsMessage *input = [FLTSongsMessage fromMap:message];
        [api removeFromPlaylist:input error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.MusicPlayerControllerApi.replacePlaylist"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTSongsMessage *input = [FLTSongsMessage fromMap:message];
        [api replacePlaylist:input error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.MusicPlayerControllerApi.setPlayMode"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTPlayModeMessage *input = [FLTPlayModeMessage fromMap:message];
        [api setPlayMode:input error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.MusicPlayerControllerApi.play"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTSongMessage *input = [FLTSongMessage fromMap:message];
        [api play:input error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.MusicPlayerControllerApi.pause"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api pause:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.MusicPlayerControllerApi.resume"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api resume:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.MusicPlayerControllerApi.stop"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api stop:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.MusicPlayerControllerApi.seek"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTPositionMessage *input = [FLTPositionMessage fromMap:message];
        [api seek:input error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface FLTMusicPlayerCallbackApi ()
@property (nonatomic, strong) NSObject<FlutterBinaryMessenger>* binaryMessenger;
@end

@implementation FLTMusicPlayerCallbackApi
- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger>*)binaryMessenger {
  self = [super init];
  if (self) {
    self.binaryMessenger = binaryMessenger;
  }
  return self;
}

- (void)streamUrl:(FLTSongMessage*)input completion:(void(^)(FLTStreamUrlMessage*, NSError* _Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.MusicPlayerCallbackApi.streamUrl"
      binaryMessenger:self.binaryMessenger];
  NSDictionary* inputMap = [input toMap];
  [channel sendMessage:inputMap reply:^(id reply) {
    NSDictionary* outputMap = reply;
    FLTStreamUrlMessage * output = [FLTStreamUrlMessage fromMap:outputMap];
    completion(output, nil);
  }];
}
- (void)onPlayerStateChange:(FLTStateMessage*)input completion:(void(^)(NSError* _Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.MusicPlayerCallbackApi.onPlayerStateChange"
      binaryMessenger:self.binaryMessenger];
  NSDictionary* inputMap = [input toMap];
  [channel sendMessage:inputMap reply:^(id reply) {
    completion(nil);
  }];
}
- (void)onSongChanged:(FLTSongMessage*)input completion:(void(^)(NSError* _Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.MusicPlayerCallbackApi.onSongChanged"
      binaryMessenger:self.binaryMessenger];
  NSDictionary* inputMap = [input toMap];
  [channel sendMessage:inputMap reply:^(id reply) {
    completion(nil);
  }];
}
- (void)onPositionChanged:(FLTPositionMessage*)input completion:(void(^)(NSError* _Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.MusicPlayerCallbackApi.onPositionChanged"
      binaryMessenger:self.binaryMessenger];
  NSDictionary* inputMap = [input toMap];
  [channel sendMessage:inputMap reply:^(id reply) {
    completion(nil);
  }];
}
- (void)onDurationChanged:(FLTDurationMessage*)input completion:(void(^)(NSError* _Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.MusicPlayerCallbackApi.onDurationChanged"
      binaryMessenger:self.binaryMessenger];
  NSDictionary* inputMap = [input toMap];
  [channel sendMessage:inputMap reply:^(id reply) {
    completion(nil);
  }];
}
@end
